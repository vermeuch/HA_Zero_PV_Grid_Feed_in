blueprint:
  name: Control PV Limit to avoid exporting to the grid
  description: >
    Zero Feed In Automation - v0.0.9

    Zet de omvormer op 100% bij energie-import (netafname).
    Reguleert PV-output op basis van netlevering bij export.

    https://github.com/AndreBott83/HA_Zero_PV_Grid_Feed_in
  domain: automation
  input:
    TriggerInterval:
      name: Interval trigger
      description: Evaluatie-interval in seconden
      default: 15
      selector:
        number:
          min: 5
          max: 120
          unit_of_measurement: "s"
          step: 5
    MaxInverterPower:
      name: Maximaal vermogen (W)
      default: 1600
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          step: 1
    MinInverterPower:
      name: Minimum vermogen (W)
      default: 600
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          step: 1
    AllowedFeedIn:
      name: Toegestane teruglevering (W)
      default: 0
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          step: 1
    ModeSelector:
      name: Regelingstype
      default: 1
      selector:
        number:
          min: 1
          max: 2
          step: 1
    InvertGrid:
      name: Inverteer netmetingen?
      default: false
      selector:
        boolean:
    GridPowerMeters:
      name: Netverbruik sensoren
      selector:
        entity:
          device_class: power
          multiple: true
    BatteryPowerMeters:
      name: Batterij sensoren
      default: []
      selector:
        entity:
          device_class: power
          multiple: true
    PVPowerMeters:
      name: PV productie sensoren
      selector:
        entity:
          device_class: power
          multiple: true
    NonPersistantLimit:
      name: Doelwaarde PV-begrenzing (%)
      selector:
        entity:
    InverterOnlineStatus:
      name: Inverter status
      selector:
        entity:

variables:
  triggerinterval: !input TriggerInterval
  lowerlimit: !input MinInverterPower
  upperlimit: !input MaxInverterPower
  currentlimit: !input NonPersistantLimit
  PVPowerMetersvar: !input PVPowerMeters
  GridPowerMetersvar: !input GridPowerMeters
  BatteryPowerMetersvar: !input BatteryPowerMeters
  ctlr_mode: !input ModeSelector
  invert_grid: !input InvertGrid
  inverteronline: !input InverterOnlineStatus

  pvgeneration: >
    {% set pv = expand(PVPowerMetersvar) | map(attribute='state') | map('float', default=0) | sum %}
    {{ pv }}

  grid_raw: >
    {% set grid = expand(GridPowerMetersvar) | map(attribute='state') | map('float', default=0) | sum %}
    {% if invert_grid %}
      {{ grid * -1 }}
    {% else %}
      {{ grid }}
    {% endif %}

  battery_raw: >
    {% set bat = expand(BatteryPowerMetersvar) | map(attribute='state') | map('float', default=0) | sum %}
    {{ bat }}

  gridsum: "{{ grid_raw + battery_raw }}"

  modifier: !input AllowedFeedIn

  modifier_setpoint: >
    {% if gridsum | float < 0 %}
      {{ modifier }}
    {% else %}
      0
    {% endif %}

  is_importing: "{{ gridsum | float > 0 }}"

  new_setpoint_mode1: >
    {% set setpoint = gridsum | float + modifier_setpoint | float + states(currentlimit) | float - 5 %}
    {% if setpoint > upperlimit %}
      {{ upperlimit }}
    {% elif setpoint < lowerlimit %}
      {{ lowerlimit }}
    {% else %}
      {{ setpoint }}
    {% endif %}

  new_setpoint_mode2: >
    {% set setpoint = gridsum | float + modifier_setpoint | float + pvgeneration | float + 5 %}
    {% if setpoint > upperlimit %}
      {{ upperlimit }}
    {% elif setpoint < lowerlimit %}
      {{ lowerlimit }}
    {% else %}
      {{ setpoint }}
    {% endif %}

  new_setpoint: >
    {% if is_importing %}
      {{ upperlimit }}
    {% elif ctlr_mode == 1 %}
      {{ new_setpoint_mode1 | round(0) }}
    {% else %}
      {{ new_setpoint_mode2 | round(0) }}
    {% endif %}

  percent_setpoint: >
    {% if upperlimit | float > 0 %}
      {{ (new_setpoint | float / upperlimit | float * 100) | round(0) }}
    {% else %}
      0
    {% endif %}

trigger:
  - platform: state
    entity_id: !input GridPowerMeters
  - platform: time_pattern
    seconds: "/15"

condition:
  - condition: template
    value_template: "{{ states(inverteronline) in ['4', 'on', 'On', 'true'] }}"
  - condition: template
    value_template: "{{ (percent_setpoint - states(currentlimit) | float) | abs > 1 }}"

action:
  - service: logbook.log
    data:
      name: "PVSetpoint %"
      message: >
        Gridsum: {{ gridsum }} W (Grid: {{ grid_raw }} + Battery: {{ battery_raw }}) |
        PV: {{ pvgeneration }} W â†’ Setpoint: {{ new_setpoint }} W ({{ percent_setpoint }}%)

  - service: number.set_value
    target:
      entity_id: !input NonPersistantLimit
    data:
      value: "{{ percent_setpoint }}"

mode: single
