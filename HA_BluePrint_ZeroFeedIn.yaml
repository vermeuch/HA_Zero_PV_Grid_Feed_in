blueprint:
  name: Control PV Limit to avoid exporting to the grid
  description: >
    # Zero Feed‑In Automation
    **Version: 0.0.9**

    # Summary
    This automation keeps the photovoltaic (PV) inverter from exporting power to the grid.
    It now **immediately pushes the inverter to 100 %** whenever there is a net import
    from the grid, and re‑enables the regular zero‑feed‑in algorithm when the flow
    turns back to export.

    ## New in 0.0.9
    * **Instant full‑power on import** – the inverter limit is set to *100 %* of its
      configured maximum as soon as `GridPowerMeters` indicate *import* (net power > 0 W).
    * Added a periodic time trigger so the rule keeps running even if the grid sensors
      do not fire state‑change events.

    ## Required sensors / entities

    * **GridPowerMeters** – Sensors measuring grid import/export (e.g. L1, L2, L3) in W.
    * **BatteryPowerMeters** – *Optional*: Sensors measuring battery charge/discharge in W.
    * **PVPowerMeters** – Sensors measuring PV generation in W.
    * **NonPersistantLimit** – *Number* entity that stores the **percentage** inverter
      power limit (0–100 %).
    * **InverterOnlineStatus** – Binary/Text entity that is *"On"* or numeric *4* when the inverter is reachable.

    Full change log & docs: https://github.com/AndreBott83/HA_Zero_PV_Grid_Feed_in
  domain: automation
  input:
    TriggerInterval:
      name: Interval trigger
      description: Interval (seconds) between periodic evaluations.
      default: 15
      selector:
        number:
          min: 5
          max: 120
          unit_of_measurement: "s"
          step: 5
    MaxInverterPower:
      name: Inverter upper limit (W)
      description: Maximum AC power the inverter can deliver.
      default: 1600
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          mode: box
          step: 1
    MinInverterPower:
      name: Inverter lower limit (W)
      description: Minimum AC power the inverter should deliver.
      default: 600
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          mode: box
          step: 1
    AllowedFeedIn:
      name: Allowed grid feed‑in (W)
      description: PV power reduction starts only if **export** exceeds this value.
      default: 0
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          mode: box
          step: 1
    ModeSelector:
      name: Control mode selector
      description: "1 → smooth control · 2 → hard cut to zero feed‑in."
      default: 1
      selector:
        number:
          min: 1
          max: 2
          step: 1
    InvertGrid:
      name: Invert GridPowerMeters?
      description: Enable if your GridPowerMeters report export as positive.
      default: false
      selector:
        boolean:
    GridPowerMeters:
      name: Grid power sensors (W)
      description: e.g. all three phase sensors L1, L2, L3.
      selector:
        entity:
          device_class: power
          multiple: true
    BatteryPowerMeters:
      name: Battery power sensors (optional)
      description: Sensors reporting battery charge/discharge power (positive for discharge).
      default: []
      selector:
        entity:
          device_class: power
          multiple: true
    PVPowerMeters:
      name: PV generation sensors (W)
      description: Sensors measuring current PV power.
      selector:
        entity:
          device_class: power
          multiple: true
    NonPersistantLimit:
      name: Non‑persistent PV limit entity (%)
      description: Number entity to write the calculated PV limit percentage (0‑100).
      selector:
        entity:
    InverterOnlineStatus:
      name: Inverter online status
      description: Entity that indicates the inverter is reachable ("On" or 4).
      selector:
        entity:

variables:
  triggerinterval: !input "TriggerInterval"
  lowerlimit: !input "MinInverterPower"
  upperlimit: !input "MaxInverterPower"
  currentlimit: !input "NonPersistantLimit"
  PVPowerMetersvar: !input "PVPowerMeters"
  GridPowerMetersvar: !input "GridPowerMeters"
  BatteryPowerMetersvar: !input "BatteryPowerMeters"
  ctlr_mode: !input "ModeSelector"
  invert_grid: !input "InvertGrid"

  # --- Combined sensor values ---
  pvgeneration: >
    {{ expand(PVPowerMetersvar) | map(attribute='state') | map('float', default=0) | sum }}
  grid_raw: >
    {% set g = expand(GridPowerMetersvar) | map(attribute='state') | map('float', default=0) | sum %}
    {% if invert_grid %}
      {% set g = g * -1 %}
    {% endif %}
    {{ g }}
  battery_raw: >
    {{ expand(BatteryPowerMetersvar) | map(attribute='state') | map('float', default=0) | sum }}
  gridsum: >
    {{ grid_raw + battery_raw }}

  # --- State flags ---
  is_importing: >
    {{ gridsum | float(0) > 0 }}

  # --- Feed‑in modifier (only for export) ---
  modifier: !input "AllowedFeedIn"
  modifier_setpoint: >
    {% if gridsum | float(0) < 0 %}
      {{ modifier }}
    {% else %}
      0
    {% endif %}

  inverteronline: !input "InverterOnlineStatus"

  # --- Regular set‑point calculations (used only for export) ---
  new_setpoint_mode1: >
    {% set sp = gridsum | float(0) + modifier_setpoint | float(0) + states(currentlimit) | float(0) - 5 %}
    {% if sp > upperlimit %}
      {% set sp = upperlimit %}
    {% elif sp < lowerlimit %}
      {% set sp = lowerlimit %}
    {% endif %}
    {{ sp }}
  new_setpoint_mode2: >
    {% set sp = gridsum | float(0) + modifier_setpoint | float(0) + pvgeneration | float(0) + 5 %}
    {% if sp > upperlimit %}
      {% set sp = upperlimit %}
    {% elif sp < lowerlimit %}
      {% set sp = lowerlimit %}
    {% endif %}
    {{ sp }}
  new_setpoint: >
    {% if ctlr_mode == 1 %}
      {{ new_setpoint_mode1 | round(0) }}
    {% else %}
      {{ new_setpoint_mode2 | round(0) }}
    {% endif %}

  # --- Percentage output to inverter ---
  percent_setpoint: >
    {% if is_importing %}
      100
    {% elif upperlimit | float(0) > 0 %}
      {{ (new_setpoint | float(0) / upperlimit | float(0)) * 100 | round(0) }}
    {% else %}
      0
    {% endif %}

trigger:
  - platform: state
    entity_id: !input "GridPowerMeters"
  - platform: time_pattern
    seconds: "/{{ triggerinterval }}"

condition:
  - condition: template
    value_template: "{{ states(inverteronline) == '4' }}"
  - condition: template
    value_template: |
      {% set last = state_attr(this.entity_id, 'last_triggered') %}
      {{ last is none or (now() - last) > timedelta(seconds=triggerinterval) }}
  - condition: template
    value_template: "{{ (percent_setpoint - states(currentlimit) | float(0)) | abs > 1 }}"

action:
  - service: logbook.log
    data_template:
      name: "PVSetpoint%:"
      message: >
        {% if is_importing %}
          Import → 100 % (Grid {{ grid_raw }} W · Battery {{ battery_raw }} W = Net {{ gridsum }} W)
        {% else %}
          Export → {{ percent_setpoint }} % (Net {{ gridsum }} W, PV {{ pvgeneration }} W)
        {% endif %}
  - service: number.set_value
    target:
      entity_id: !input "NonPersistantLimit"
    data:
      value: "{{ percent_setpoint }}"

mode: single

